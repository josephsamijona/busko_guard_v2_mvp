# Generated by Django 5.2.1 on 2025-05-14 13:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="Date de naissance de l'utilisateur.",
                        null=True,
                        verbose_name="Date de naissance",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Numéro de téléphone de contact de l'utilisateur.",
                        max_length=20,
                        null=True,
                        verbose_name="Numéro de téléphone",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Adresse postale de l'utilisateur.",
                        null=True,
                        verbose_name="Adresse",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        help_text="Photo de profil de l'utilisateur.",
                        null=True,
                        upload_to="profile_pics/",
                        verbose_name="Photo de profil",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Le nom officiel du département (ex: 'Ressources Humaines', 'Informatique').",
                        max_length=100,
                        verbose_name="Nom du département",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description facultative des responsabilités ou objectifs du département.",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="L'intitulé du poste (ex: 'Développeur Senior', 'Chef de projet').",
                        max_length=100,
                        verbose_name="Nom du rôle",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description facultative des responsabilités ou compétences associées à ce rôle.",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="employee_profile",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur associé",
                    ),
                ),
                (
                    "employee_id",
                    models.CharField(
                        help_text="Identifiant unique de l'employé au sein de l'entreprise.",
                        max_length=20,
                        unique=True,
                        verbose_name="ID Employé",
                    ),
                ),
                (
                    "nfc_id",
                    models.CharField(
                        blank=True,
                        help_text="Identifiant de la carte NFC de l'employé, si applicable.",
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="ID NFC",
                    ),
                ),
                (
                    "qr_code",
                    models.CharField(
                        blank=True,
                        help_text="Données du code QR de l'employé, si applicable.",
                        max_length=255,
                        null=True,
                        verbose_name="Code QR",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        help_text="Département auquel l'employé est rattaché.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.department",
                        verbose_name="Département",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        help_text="Rôle ou poste de l'employé.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.role",
                        verbose_name="Rôle",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LeaveRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Date de début du congé demandé.",
                        verbose_name="Date de début",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        help_text="Date de fin du congé demandé.",
                        verbose_name="Date de fin",
                    ),
                ),
                (
                    "leave_type",
                    models.CharField(
                        choices=[
                            ("VACATION", "Vacances"),
                            ("SICK", "Maladie"),
                            ("PERSONAL", "Personnel"),
                            ("OTHER", "Autre"),
                        ],
                        help_text="La nature du congé (Vacances, Maladie, etc.).",
                        max_length=20,
                        verbose_name="Type de congé",
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        help_text="Explication ou motif de la demande de congé.",
                        verbose_name="Motif",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En attente"),
                            ("APPROVED", "Approuvé"),
                            ("REJECTED", "Rejeté"),
                        ],
                        default="PENDING",
                        help_text="Le statut actuel de la demande (En attente, Approuvé, Rejeté).",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "request_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date et heure à laquelle la demande a été soumise.",
                        verbose_name="Date de la demande",
                    ),
                ),
                (
                    "response_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date et heure à laquelle la demande a été traitée (approuvée/rejetée).",
                        null=True,
                        verbose_name="Date de réponse",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        help_text="L'employé qui soumet la demande de congé.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leave_requests",
                        to="core.employee",
                        verbose_name="Demandeur",
                    ),
                ),
                (
                    "response_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="L'employé (généralement un manager ou RH) qui a répondu à la demande.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_leave_requests",
                        to="core.employee",
                        verbose_name="Traité par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Demande de congé",
                "verbose_name_plural": "Demandes de congé",
                "ordering": ["-request_date"],
            },
        ),
        migrations.CreateModel(
            name="AttendanceRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date et heure exactes du pointage.",
                        verbose_name="Horodatage",
                    ),
                ),
                (
                    "record_type",
                    models.CharField(
                        choices=[
                            ("IN", "Entrée (Clock In)"),
                            ("OUT", "Sortie (Clock Out)"),
                            ("BREAK_START", "Début de Pause"),
                            ("BREAK_END", "Fin de Pause"),
                        ],
                        help_text="Nature de l'enregistrement (entrée, sortie, début/fin de pause).",
                        max_length=20,
                        verbose_name="Type de pointage",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Lieu du pointage (ex: 'Bureau principal', 'Client X') (facultatif).",
                        max_length=100,
                        null=True,
                        verbose_name="Lieu",
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Notes additionnelles concernant ce pointage (facultatif).",
                        null=True,
                        verbose_name="Note",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        help_text="L'employé concerné par ce pointage.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.employee",
                        verbose_name="Employé",
                    ),
                ),
            ],
            options={
                "verbose_name": "Enregistrement de présence",
                "verbose_name_plural": "Enregistrements de présence",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day_of_week",
                    models.IntegerField(
                        choices=[
                            (0, "Lundi"),
                            (1, "Mardi"),
                            (2, "Mercredi"),
                            (3, "Jeudi"),
                            (4, "Vendredi"),
                            (5, "Samedi"),
                            (6, "Dimanche"),
                        ],
                        help_text="Jour de la semaine pour cet horaire (0=Lundi, 6=Dimanche).",
                        verbose_name="Jour de la semaine",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        help_text="Heure à laquelle l'employé commence à travailler.",
                        verbose_name="Heure de début",
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        help_text="Heure à laquelle l'employé termine de travailler.",
                        verbose_name="Heure de fin",
                    ),
                ),
                (
                    "break_start",
                    models.TimeField(
                        blank=True,
                        help_text="Heure de début de la pause (facultatif).",
                        null=True,
                        verbose_name="Début de pause",
                    ),
                ),
                (
                    "break_end",
                    models.TimeField(
                        blank=True,
                        help_text="Heure de fin de la pause (facultatif).",
                        null=True,
                        verbose_name="Fin de pause",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        help_text="L'employé concerné par cet horaire.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.employee",
                        verbose_name="Employé",
                    ),
                ),
            ],
            options={
                "verbose_name": "Horaire",
                "verbose_name_plural": "Horaires",
                "unique_together": {("employee", "day_of_week")},
            },
        ),
    ]
